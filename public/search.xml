<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex中使用简便好看的超链接引用</title>
    <url>/2020/04/28/latex_ref/</url>
    <content><![CDATA[<p>搭配使用hyperref和cleverref两个宏包，辅以xcolor宏包。</p>
<span id="more"></span>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>这个方法没有处理引用与正文之间的间距，不美观，我现在已经不用了。</p>
<p>以下是原文。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Latex自带的引用<code>ref&#123;lable&#125;</code>将只对数字产生效果，而诸如Figure、Table、Equation等文字不会产生超链接的效果。可以使用hyperref宏包解决这个问题：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]&#123;ctexart&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125; <span class="comment">%图</span></span><br><span class="line"><span class="keyword">\usepackage</span>[usenames,dvipsnames]&#123;xcolor&#125; <span class="comment">%加入颜色包并预加载颜色名称</span></span><br><span class="line"><span class="keyword">\definecolor</span>&#123;DarkGreen&#125;&#123;rgb&#125;&#123;0.0,0.4,0.0&#125; <span class="comment">%自定义颜色名称</span></span><br><span class="line"><span class="keyword">\usepackage</span>[colorlinks,</span><br><span class="line">            linkcolor=MidnightBlue,</span><br><span class="line">            anchorcolor=blue,</span><br><span class="line">            citecolor=red</span><br><span class="line">            ]&#123;hyperref&#125; <span class="comment">%超链接</span></span><br><span class="line"><span class="keyword">\usepackage</span>[capitalise,noabbrev]&#123;cleveref&#125; <span class="comment">%大写且不缩写的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[htbp]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=1<span class="keyword">\textwidth</span>]&#123;test.png&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;title&#125;<span class="keyword">\label</span>&#123;fig:contribute&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br><span class="line"></span><br><span class="line">Just like <span class="keyword">\ref</span>&#123;fig:contribute&#125;.</span><br><span class="line"></span><br><span class="line">Just like <span class="keyword">\cref</span>&#123;fig:contribute&#125;.</span><br><span class="line"></span><br><span class="line">Just like <span class="keyword">\hyperref</span>[fig:contribute]&#123;<span class="keyword">\cref</span>*&#123;fig:contribute&#125;&#125;.</span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/mansang127/typora-pic/master/img/20200428233515.png" style="zoom:100%">

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>hyperref的用法为<code>\hyperref[标签]&#123;描述&#125;</code>，我们通过修改{描述}中的内容可以实现自定义超链接的文字。通过带星号的ref引用，可以产生不含超链接的编号，以免和hyperref发生冲突。</p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>导入hyperref宏包的时候可以选择链接的颜色，如果使用xcolor宏包就可以实现自定义颜色。导入xcolor宏包时可以预加载一些颜色名称，例如MidnightBlue，当然也可以通过definecolor自定义颜色，例如DarkGreen。</p>
<h2 id="更加简便的引用"><a href="#更加简便的引用" class="headerlink" title="更加简便的引用"></a>更加简便的引用</h2><p>当引用不同的对象时，关键字也需要修改，比如插图的话就要写Figure，表格的话就要写Table。通过使用cleverref宏包的cref命令，可以自动识别引用的对象是哪种，自动添加上对应的关键字。还可以自定义关键字的样式，比如是否大写，是否使用缩写等。注意cleverref宏包一定要在hyperref宏包之后加入。最后，可以通过定义新命令来节省时间。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>*&#123;<span class="keyword">\myref</span>&#125;[1]&#123;<span class="keyword">\hyperref</span>[<span class="params">#1</span>]&#123;<span class="keyword">\cref</span>*&#123;<span class="params">#1</span>&#125;&#125;&#125;</span><br><span class="line">...</span><br><span class="line">Just like <span class="keyword">\myref</span>&#123;fig:contribute&#125;.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积与互相关的关系及相关定理的推导</title>
    <url>/2020/06/24/conv_and_xcorr/</url>
    <content><![CDATA[<p>包括基本数学定义，交换性质，两者的关系，卷积和相关定理。包括证明。</p>
<span id="more"></span>

<h2 id="卷积与互相关"><a href="#卷积与互相关" class="headerlink" title="卷积与互相关"></a>卷积与互相关</h2><ol>
<li><p>数学定义</p>
<p> 卷积：$z(t)=x(t)*y(t)=\int_{-\infty}^{+\infty}x(\tau)y(t-\tau)\ \rm{d}\tau$</p>
<p> 相关：$R_{xy}(\tau)=x(t)☆y(t)=\int_{-\infty}^{+\infty}x^*(t)y(t+\tau)\ \rm{d}t$</p>
<p> 两者很像，但要注意卷积的积分变量是 $\tau$ ，相关的积分变量是 $t$ 。</p>
</li>
</ol>
<ol start="2">
<li><p>交换性</p>
<p> 卷积满足交换律，即 $x(t)*y(t)=y(t)*x(t)$</p>
<p> 相关不满足交换律， 即 $R_{xy}(\tau)=R_{yx}(-\tau)=\int_{-\infty}^{+\infty}x^*(t+\tau)y(t)\ \rm{d}t$</p>
<p> 证明：<br> $$<br> \begin{aligned}<br> R_{xy}(\tau)&amp;=\rm{E}[x(t)y(t+\tau)]\<br> &amp;=\rm{E}[y(t+\tau)x(t)]\<br> &amp;=R_{yx}(-\tau)<br> \end{aligned}<br> $$</p>
</li>
</ol>
<ol start="3">
<li><p>卷积和相关的数学关系</p>
<p> $x(t)☆y(t)=x^*(-\tau)*y(\tau)$</p>
<p> 证明：<br> $$<br> \begin{aligned}<br> R_{xy}(\tau)=x(t)☆y(t)&amp;=\int_{-\infty}^{+\infty}x^*(t)y(t+\tau)\ \rm{d}t\<br> &amp;=\int_{-\infty}^{+\infty}x^*(t-\tau)y(t)\ \rm{d}t\<br> &amp;=\int_{-\infty}^{+\infty}x^*(-(\tau-t))y(t)\ \rm{d}t\<br> &amp;=x^*(-\tau)*y(\tau)<br> \end{aligned}<br> $$</p>
</li>
<li><p>卷积定理和相关定理</p>
<p> 卷积定理：$x(t)*y(t)=X(j\omega)\cdot Y(j\omega)$</p>
<p> 相关定理：$x(t)☆y(t)=X^*(j\omega)\cdot Y(j\omega)$</p>
<p> 证明：根据 $f(-t)\leftrightarrow F(-j\omega),\quad f^*(t)\leftrightarrow F^*(-j\omega)$<br> $$<br> \begin{aligned}<br> x(t)☆y(t)&amp;=x^*(-\tau)<em>y(\tau)\<br> &amp;=X^</em>(j\omega)\cdot Y(j\omega)<br> \end{aligned}<br> $$</p>
</li>
</ol>
<h2 id="图像处理的内容"><a href="#图像处理的内容" class="headerlink" title="图像处理的内容"></a>图像处理的内容</h2><p>二维图像中，设图像为 $f(x,y)$，模板为 $h(x,y)$，</p>
<p>卷积处理：$h(x,y)*f(x,y)=\sum\limits_{-s}^{s}\sum\limits_{-t}^{t}h(s,t)f(x-s,y-t)$</p>
<p>相关处理：$h(x,y)☆f(x,y)=\sum\limits_{-s}^{s}\sum\limits_{-t}^{t}h(s,t)f(x+s,y+t)$</p>
<p>卷积定理：$h(x,y)*f(x,y)=H(j\omega)\cdot F(j\omega)$</p>
<p>相关定理：$h(x,y)☆f(x,y)=H^*(j\omega)\cdot F(j\omega)$</p>
<p>数字图像处理中（冈萨雷斯 第三版），相关处理定义为 $f(x,y)☆h(x,y)=\sum\limits_{-s}^{s}\sum\limits_{-t}^{t}f(s,t)h(x+s,y+t)$，其实和上面罗列的定义是一样的，只不过书中默认 $f(x,y)$ 是模板，$h(x,y)$ 是图像。其他公式道理相同。</p>
<p>依据卷积、相关定理可以证明：设$h(x,y)=h_1(x,y)*h_2(x,y)$</p>
<ul>
<li>$f(x,y)*h(x,y)=f(x,y)*h_1(x,y)*h_2(x,y)$</li>
<li>$h(x,y)☆f(x,y)=h_2(x,y)☆h_1(x,y)☆f(x,y)$</li>
</ul>
<p>使用 matlab 验证：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear all</span><br><span class="line">h1 = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>];</span><br><span class="line">h2 = [<span class="number">1</span>;<span class="number">2</span>;<span class="number">3</span>];</span><br><span class="line">h = conv2(h1,h2);</span><br><span class="line">f = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>;<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>];</span><br><span class="line"><span class="comment">%验证相关定理</span></span><br><span class="line">imfilter(f,h,<span class="string">&#x27;circular&#x27;</span>)</span><br><span class="line">fftshift(ifft2(<span class="built_in">conj</span>(fft2(f)).*fft2(h)))</span><br><span class="line"><span class="comment">%验证一次大相关可以分解成两次小相关</span></span><br><span class="line">imfilter(imfilter(f,h1,<span class="string">&#x27;circular&#x27;</span>),h2,<span class="string">&#x27;circular&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Pages配合Hexo主题Next搭建个人网站</title>
    <url>/2020/04/24/next/</url>
    <content><![CDATA[<p>使用Github Pages配合Hexo，并配置Hexo的Next主题。记录一下个人在搭建过程中遇到的一些问题，希望能为其他人节省一些时间。</p>
<span id="more"></span>



<h2 id="2021年6月更新"><a href="#2021年6月更新" class="headerlink" title="2021年6月更新"></a>2021年6月更新</h2><h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>我在2020年疫情期间搭建了自己的网站，当时兴趣正浓，目标是做成一个内容丰富有特色的个人站点。我认真寻找了网站每处细节对应的代码开关，调整或修正。但网站只是作为个人创作的一个发布平台，非专业人士耗费过多精力在其上是不可取的，实际上去年搭建完毕之后，我几乎没有什么内容产出，网站也因此荒废了下来。</p>
<p>一年过后，我侥幸地通过了缠绕在我心头两三年的研究生考试，如今又回来弥补当初留下的缺憾。搭建个人网站不比各种已经很完善的论坛，很多事情需要亲力而为，但又比它们多了一份曲径通幽处的感觉，让人很有创作欲望。可想一个带有问题的朋友来到我的网站看到我的文字，问题迎刃而解，虽不相识，但平添了一份默契和缘分，何其美妙。</p>
<h3 id="细节设置"><a href="#细节设置" class="headerlink" title="细节设置"></a>细节设置</h3><p>虽如上文所说不应花费过多精力，但一些基本的设置还是要有的。</p>
<ol>
<li><p>部署好Hexo和Next主题后，在站点文件中设置<code>theme</code>为next，主题配置文件中设置<code>scheme</code>为Gemini。</p>
</li>
<li><p>设置网站名称、子名称、简介、个人名字、头像以及设置网站为语言为<code>zh-CN</code>。</p>
</li>
<li><p>站内搜索功能：安装插件<code>npm install hexo-generator-searchdb --save</code>、站点文件加入以下代码</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: ./public/search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p> 最后主题文件开启<code>Local search</code>。</p>
</li>
</ol>
<p>以下各节是2020年的文章，有所修正</p>
<h2 id="Github-Pages配合Hexo初步搭建网站"><a href="#Github-Pages配合Hexo初步搭建网站" class="headerlink" title="Github Pages配合Hexo初步搭建网站"></a>Github Pages配合Hexo初步搭建网站</h2><p>按照这篇文章一步步做就可以了<a href="https://zhuanlan.zhihu.com/p/26625249" title="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a>，这里分享一下需要注意的地方。</p>
<ol>
<li><p>仓库一定要按照 <strong>用户名.github.io</strong> 这个形式</p>
</li>
<li><p>这种语句是带引号的，输入的时候要注意</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">举例：git config --global user.name &quot;mansang127&quot;</span><br></pre></td></tr></table></figure>
<p> 这一步假如出现类似No such file or directory的错误，检查一下用户变量中的HOME值，确保是一个存在的文件夹。解答来自于<a href="https://blog.csdn.net/Anerror/article/details/80550318" title="https://blog.csdn.net/Anerror/article/details/80550318">Git配置error:could not lock config file …/.gitconfig:No such file or directory</a>。</p>
</li>
<li><p>新建的blog文件夹要检查一下是否赋予了管理员权限，不然有些命令可能会报错，图中的勾选相当于赋予了管理员权限。<img src="https://raw.githubusercontent.com/mansang127/typora-pic/master/img/20200427234444.png" style="zoom:100%"></p>
</li>
<li><p>通过cmd窗口进入到blog文件夹，与<code>Git Bash Here</code>效果相同。</p>
</li>
<li><p><code>npm install -g hexo-cli </code>命令出错参考<a href="https://github.com/coreybutler/nvm-windows/issues/300" title="https://github.com/coreybutler/nvm-windows/issues/300">Cannot update npm (node 8.4.0)</a>中<a href="https://github.com/kuncevic">kuncevic</a>的回答，他的办法对于我来说是有效的。</p>
</li>
<li><p><code>hexo init blog</code>将会创建一个新的blog文件夹，之后的诸如<code>hexo g</code>命令要在这个新的blog文件夹里执行，这点原文中有提，但是看起来容易让人忽略，可以使用<code>hexo init</code>来避免blog文件夹的嵌套。如果命令报错的话检查一下nodejs是否是最新版本。</p>
</li>
<li><p>修改<strong>站点配置文件</strong>的deploy内容时，注意每个冒号后面需要有一个空格。</p>
</li>
</ol>
<h2 id="撰写博客——Markdown说明"><a href="#撰写博客——Markdown说明" class="headerlink" title="撰写博客——Markdown说明"></a>撰写博客——Markdown说明</h2><h3 id="markdown介绍"><a href="#markdown介绍" class="headerlink" title="markdown介绍"></a>markdown介绍</h3><p>写博客使用markdown语法，网上的教程有很多，找一篇跟着例子写一写半天就能学会。编辑器推荐使用typora，不仅支持数学公式而且还能实时预览，还支持html语法。</p>
<p>使用markdown语法可以用相对少的时间写出相对整齐的文章，节省了排版的时间。虽然可以通过自定义css文件来修改排版，但不推荐这样。若想要更加精细的排版不如使用latex，不过latex的缺点是语法繁杂，不适合用来做笔记。Windows下markdown的插图推荐使用Picgo配合GitHub图床，配置好之后只需要三步<strong>win+shift+s截图→上传→粘贴</strong>就能插图了，若想缩放图片只需要在语法后面加上<code>style=&quot;zoom:100%&quot;</code>就可以了。左对齐可以使用html标签，在图片前面加上<code>&lt;left&gt;</code>即可。唯一的缺点就是加载速度可能较慢，因为Github在国外。不建议使用本地图片，一是不易管理，二是不支持缩放。不建议使用新浪图床，不够稳定。</p>
<h3 id="写博客需要知道的额外内容"><a href="#写博客需要知道的额外内容" class="headerlink" title="写博客需要知道的额外内容"></a>写博客需要知道的额外内容</h3><p>上传到网站的博客必须在开头添加一些内容，例如这篇博客的开头就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Github Pages配合Hexo主题Next搭建个人网站</span><br><span class="line">date: 2020-4-24</span><br><span class="line">tags:</span><br><span class="line">- Next</span><br><span class="line">categories: 学习笔记</span><br><span class="line">mathjax: false</span><br><span class="line">---</span><br><span class="line">使用Github Pages配合Hexo，并配置Hexo的Next主题。记录一下个人在搭建过程中遇到的一些问题，希望能为其他人节省一些时间。</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>其中mathjax是数学模式开关，安装插件后可以使用，如果没有公式的话关闭可以提高加载速度。最后几行是摘要。注意上传到网站的博客，标题不能跨级（markdown标题一共有六级），否则目录部分会出现bug。即不能二级标题后接四级标题，可以二级接三级再回到二级这样子，至少对于接下来要介绍的next主题是这样的。</p>
<h2 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h2><p>对于很多人来说，博客内容才是主要的，自己DIY网站的外观往往需要大量的时间，不如直接使用优秀的主题，我的网站使用的就是Next主题，这个主题使用的人数相当多，遇到什么问题解决起来也很方便。诸如头像设置这种网上很容易找到答案，我就不再提了，这里我主要写一些因为版本不同导致网上相关解答很少的内容。同时推荐很详细的一篇Next主题配置博文<a href="https://juejin.im/post/5a71ab9f518825735300ee6c">NexT主题的配置和优化指南</a>。遇到难以解决的问题的话用英文关键字上网搜搜，说不定会有意外收获。我保留了我的主题版本，有需要的可以自行<a href="https://github.com/mansang127/mansang127.github.io/blob/master/hexo-theme-next-master.rar">下载</a>。</p>
<h3 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h3><p>Next的Github地址<a href="https://github.com/theme-next/hexo-theme-next">hexo-theme-next</a>，在内层blog文件夹下使用<code>git clone https://github.com/theme-next/hexo-theme-next themes/next</code>即可安装，或者手动下载放到themes文件夹也行。记得在站点配置文件里设置主题为next，这里可以参照之前搭建个人网站的那篇文章。</p>
<h3 id="图标问题"><a href="#图标问题" class="headerlink" title="图标问题"></a>图标问题</h3><p>当设置好next主题后，使用<code>hexo clean &amp;&amp; hexo g -d</code>更新网站，可能会遇到图标无法显示的问题。这是因为网站的图标是使用<a href="https://fontawesome.com/icons">fontawesome</a>的代码，而它经历了一次v4到v5的更新，这导致语法的改变<a href="https://github.com/theme-next/hexo-theme-next/issues/505">FontAwesome icon issue | FontAwesome 图标问题</a>。v4的语法是<code>fa fa-foo</code>，而v5则变成了<code>far fa-foo</code>或<code>fas fa-foo</code>，r意味着regular，s意味着solid，解决办法有两种。一种是在主题配置文件下找到fontawesome这一项并设为//cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css，这样做的话使用的是v5图标；第二种方法相对麻烦，要找到问题图标对应的代码处，一个个将far或fas改为fa，这样做的话使用的是v4图标，有时候可能需要改为<code>fa fa-foo-o</code>，o是outline轮廓。v5版本的图标相对v4来说要略大一些，我个人更喜欢并且使用的是v4，不过其实差别不大。图标代码主要从主题配置文件以及post.swig和footer.swig这两个文件里找，还有极个别的图标可能需要在post-footer.swig以及其他文件里找。可以通过*.swig搜索所有相关文件然后用notepad++全部打开，再用ctrl+f在所有文件中查找关键字。</p>
<h3 id="博客浏览次数和站点访问量"><a href="#博客浏览次数和站点访问量" class="headerlink" title="博客浏览次数和站点访问量"></a>博客浏览次数和站点访问量</h3><p>博客的浏览次数可以看这篇<a href="https://leaferx.online/2018/02/11/lc-security/">Leancloud访客统计插件重大安全漏洞修复指南</a>，这个可以说是主题配置中最复杂的一个环节了。顺带一提Leancloud的界面已经有所改变，有些地方跟教程里对不上，但带来的麻烦不大。</p>
<p>站点访问量在主题位置文件中搜索busuanzi_count，打开相关参数就可以了。这里涉及UV和PV两种不同的统计方法，可以参照这篇<a href="https://www.zhihu.com/question/20448467">如何清楚易懂的解释“UV和PV＂的定义？</a>。</p>
<h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>站内搜索建议使用本地搜索功能，algolia搜索需要注册网站账号有点麻烦，尝试过后没比本地搜索快多少。在主题配置文件中找到local_search并打开，然后在站点配置文件中加上如下代码即可。（原理的话可以在网上搜一下，很容易找到）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: ./public/search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p>评论功能的实现有很多方法，我使用的是<a href="https://github.com/gitalk/gitalk">Gitalk</a>。网上的教程有很多，但步骤大多有些多余。找一篇教程按照步骤建立好仓库之后得到id等相关内容，在主题配置文件中找到Gitalk相关参数，对照着填好就可以了，不需要修改任何其他代码。(印象中不需要安装任何插件，如果行不通的话尝试运行下面的代码，代码来自Gitalk项目页)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i --save gitalk</span><br><span class="line">import &#x27;gitalk/dist/gitalk.css&#x27;</span><br><span class="line">import Gitalk from &#x27;gitalk&#x27;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
